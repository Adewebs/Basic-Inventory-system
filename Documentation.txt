Project Setup and API Interaction Documentation
Prerequisites
Ensure you have the following installed:

Python 3.8+
Django 3.x
Django REST Framework
django-cors-headers==4.3.1
Postman (for API testing)
you can get all the dependcies and libabry in the requirment.txt file

1. Setting Up the Project
Unzip this file

Install Dependencies


pip install -r requirements.txt

Database Setup
Apply Migrations


python manage.py migrate
Create a Superuser (optional, for admin access)



python manage.py createsuperuser

Running the Server

python manage.py runserver
Your Django server should now be running at http://127.0.0.1:8000/.

2. API Endpoints and Interactions
Here is a list of all the API endpoints along with the required parameters and sample requests.
though there is postman collection you can fork via this link "https://www.postman.com/grey-space-518217/workspace/inventory-system-api/collection/29519594-7ad6d528-1aa1-4ab4-8c18-78ca57da8cd5?action=share&creator=29519594"

Base URL

http://127.0.0.1:8000/

Endpoints

Add Items

URL: /add_items/
Method: POST
Parameters:
product_name (string)
product_price (float)
product_description (string, optional)
product_quantity (int)
product_supplier (int, Supplier ID)
product_staff (int, Staff ID)

Sample Request:
json

{
    "product_name": "Sample Product",
    "product_price": 19.99,
    "product_description": "A sample product",
    "product_quantity": 100,
    "product_supplier": 1,
    "product_staff": 1
}

Add Suppliers

URL: /add_suppliers/
Method: POST
Parameters:
supplier_name (string)
supplier_email (string)
supplier_phone_number (string, optional)
supplier_contact_address (string, optional)

Sample Request:
json

{
    "supplier_name": "Sample Supplier",
    "supplier_email": "supplier@example.com",
    "supplier_phone_number": "123-456-7890",
    "supplier_contact_address": "123 Sample Street"
}

Update Items

URL: /update_items/
Method: POST
Parameters:
product_id (int)
product_name (string, optional)
product_price (float, optional)
product_description (string, optional)
product_quantity (int, optional)
product_supplier (int, optional)

Sample Request:
json

{
    "product_id": 1,
    "product_name": "Updated Product",
    "product_price": 29.99,
    "product_description": "An updated sample product",
    "product_quantity": 150,
    "product_supplier": 2
}

Update Suppliers

URL: /update_supplier/
Method: POST
Parameters:
supplier_id (int)
supplier_name (string, optional)
supplier_email (string, optional)
supplier_phone_number (string, optional)
supplier_contact_address (string, optional)

Sample Request:
json

{
    "supplier_id": 1,
    "supplier_name": "Updated Supplier",
    "supplier_email": "updated_supplier@example.com",
    "supplier_phone_number": "987-654-3210",
    "supplier_contact_address": "321 Updated Street"
}

List All Products

URL: /list_items/
Method: POST
Parameters: None

Sample Request:
json

{}

List All Suppliers

URL: /list_suppliers/
Method: POST
Parameters: None

Sample Request:
json

{}
Delete Items

URL: /delete_items/
Method: POST
Parameters:
product_id (int)

Sample Request:
json

{
    "product_id": 1
}

Delete Suppliers

URL: /delete_supplier/
Method: POST
Parameters:
supplier_id (int)

Sample Request:
json

{
    "supplier_id": 1
}

3. Testing with Postman
Import the Collection:

Open Postman.
Click on Import in the top left corner.
Select the Collection tab.
Import the provided Postman collection file or manually add the endpoints.
Create and Send Requests:

Select the desired endpoint from the collection.
Set the HTTP method (POST for all endpoints).
Provide the necessary parameters in the Body tab.
Click Send to test the API.
4. Additional Information
Authentication: Currently, all endpoints are open (AllowAny permission). If authentication is needed, modify the permission_classes in the views accordingly.
Error Handling: The API returns appropriate status codes and messages for missing or incorrect parameters.
Database Models: Ensure the database models (ProductsInventory, SuppliersInventory, EmployeeRecord) are correctly defined in models.py.
This documentation should help team members set up the project and interact with the API endpoints efficiently. If you have any questions or need further assistance, feel free to reach out.